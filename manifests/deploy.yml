#applicants-api.yml

#service
apiVersion: v1
kind: Service
metadata:
  name: applicants-api-service
  namespace: projet-cloud
spec:
  selector:
    app: applicants-api-pod
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: applicants-deployment
  namespace: projet-cloud
  labels:
    app: applicants-api
spec:
  selector:
    matchLabels:
      app: applicants-api-pod
  template:
    metadata:
      labels:
        app: applicants-api-pod
    spec:
      containers:
      - name: applicants-api
        image: fofanad97/projet-applicants-api:v1
        ports:
          - containerPort: 80
        env: 
        - name: ConnectionString
          value: Server=mssql-service;User=sa;Password=Pass@word;Database=dotnetgigs.applicants;
        - name: HostRabbitmq
          value: rabbitmq-service
        resources:
          requests:
            memory: 500Mi
            cpu: 0.5
          limits:
            memory: 1500Mi
            cpu: 1
      restartPolicy: Always
---    

#identity-api.yml  

#service
apiVersion: v1
kind: Service
metadata:
  name: identity-api-service
  namespace: projet-cloud
spec:
  selector:
    app: identity-api-pod
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-deployment
  namespace: projet-cloud
  labels:
    app: identity-api
spec:
  selector:
    matchLabels:
      app: identity-api-pod
  template:
    metadata:
      labels:
        app: identity-api-pod
    spec:
      containers:
      - name: identity-api
        image: fofanad97/projet-identity-api:v1
        ports:
          - containerPort: 80
        env: 
        - name: RedisHost
          value: redis-service:6379
        - name: HostRabbitmq
          value: rabbitmq-service
        resources:
          requests:
            memory: 500Mi
            cpu: 0.5
          limits:
            memory: 1500Mi
            cpu: 1
      restartPolicy: Always
---

#jobs-api.yml

#service
apiVersion: v1
kind: Service
metadata:
  name: jobs-api-service
  namespace: projet-cloud
spec:
  selector:
    app: jobs-api-pod
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs-deployment
  namespace: projet-cloud
  labels:
    app: jobs-api
spec:
  selector:
    matchLabels:
      app: jobs-api-pod
  template:
    metadata:
      labels:
        app: jobs-api-pod
    spec:
      containers:
      - name: jobs-api
        image: fofanad97/projet-jobs-api:v1
        ports:
          - containerPort: 80
        env: 
        - name: ConnectionString
          value: Server=mssql-service;User=sa;Password=Pass@word;Database=dotnetgigs.jobs;
        - name: HostRabbitmq
          value: rabbitmq-service
        resources:
          requests:
            memory: 500Mi
            cpu: 0.5
          limits:
            memory: 1500Mi
            cpu: 1
      restartPolicy: Always
---

#mssql.yml

#service mssql
apiVersion: v1
kind: Service
metadata:
  name: mssql-service
  namespace: projet-cloud
spec:
  selector:
    app: mssql-pod
  ports:
    - port: 1433
      targetPort: 1433
  type: ClusterIP
---
#volume
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mssql-volume-claim
  namespace: projet-cloud
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
#deployment mssql
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql-deployment
  namespace: projet-cloud
  labels:
    app: mssql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql-pod
  template:
    metadata:
      labels:
        app: mssql-pod
    spec:
      containers:
      - image: bart120/yv-database:1
        name: mssql
        ports:
        - containerPort: 1433
          name: mssql-port
        volumeMounts:
        - name: mssql-volume
          mountPath: /var/opt/mssql
      volumes:
      - name: mssql-volume
        persistentVolumeClaim:
          claimName: mssql-volume-claim
      restartPolicy: Always
---

#rabbitmq.yml

#service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: projet-cloud
spec:
  selector:
    app: rabbitmq-pod
  ports:
    - port: 15672
      name: rabbitmq-port-1
      targetPort: 15672
    - port: 5672
      name: rabbitmq-port-2
      targetPort: 5672
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
  namespace: projet-cloud
  labels:
    app: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq-pod
  template:
    metadata:
      labels:
        app: rabbitmq-pod
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        ports:
          - containerPort: 15672
          - containerPort: 5672
      restartPolicy: Always
---

#redis.yml

#service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: projet-cloud
spec:
  selector:
    app: redis-pod
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: projet-cloud
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis-pod
  template:
    metadata:
      labels:
        app: redis-pod
    spec:
      containers:
      - name: redis
        image: redis
        ports:
          - containerPort: 6379
        resources:
          requests:
            memory: 500Mi
            cpu: 4
      restartPolicy: Always
---

#webmvc.yml

#service
apiVersion: v1
kind: Service
metadata:
  name: webmvc-service
  namespace: projet-cloud
spec:
  selector:
    app: webmvc-pod
  ports:
    - port: 8080
      targetPort: 80
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webmvc-deployment
  namespace: projet-cloud
  labels:
    app: webmvc
spec:
  selector:
    matchLabels:
      app: webmvc-pod
  template:
    metadata:
      labels:
        app: webmvc-pod
    spec:
      containers:
      - name: webmvc
        image: fofanad97/projet-web:v1
        ports:
          - containerPort: 80
        resources:
          requests:
            memory: 900Mi
            cpu: 0.5
          limits:
            memory: 2000Mi
            cpu: 1
      restartPolicy: Always
---


#ElasticSearch

#service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: projet-cloud
spec:
  selector:
    app: elasticsearch
  ports:
  - name: elasticsearch
    port: 9200
    targetPort: 9200
  type: ClusterIP
---
#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
  namespace: projet-cloud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - image: elasticsearch:7.14.2
        name: elasticsearch
        env:
        - name: ES_JAVA_OPTS
          value: -Xms512m -Xmx512m
        - name: discovery.type
          value: single-node
      initContainers:
      - name: increase-vm-max-map
        image: busybox
        ports:
        - containerPort: 9200
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
---

#Kibana

apiVersion: v1
kind: Service
metadata:
  name: kibana-service
  namespace: projet-cloud
spec:
  selector:
    app: kibana
  ports:
  - port: 80
    targetPort: 5601
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-deployment
  namespace: projet-cloud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - image: kibana:7.14.2
        name: kibana
        ports:
        - containerPort: 5601
        env:
          - name: ELASTICSEARCH_HOSTS
            value: http://elasticsearch:9200
          - name: ELASTICSEARCH_URL
            value: http://elasticsearch:9200
          - name: SERVER_BASEPATH
            value: "/admin"

---
#ingress.yml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: projet-ingress
  namespace: projet-cloud
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - localhost
    secretName: tls-secret
  rules:
  - host: localhost
    http:
      paths:
      - path: /(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: webmvc-service
            port:
              number: 80
      - path: /admin(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: kibana-service
            port:
              number: 80